// Force rebuild
import React, { useState } from 'react';

// ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç, —è –π–æ–≥–æ —Å–∫–æ—Ä–æ—Ç–∏–≤ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ)
const scenarios = [
    {
      id: 1,
      title: "–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–æ—Å–∏–ª–∫–∏",
      objection: "–ß–æ–º—É –º–æ—è –ø–æ—Å–∏–ª–∫–∞ –∑–∞—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∂–µ –Ω–∞ 3 –¥–Ω—ñ? –í–∞—à —Å–µ—Ä–≤—ñ—Å –∂–∞—Ö–ª–∏–≤–∏–π!",
      idealAnswer: "–Ø —Ä–æ–∑—É–º—ñ—é –≤–∞—à–µ —Ä–æ–∑—á–∞—Ä—É–≤–∞–Ω–Ω—è, —ñ –º–µ–Ω—ñ –¥—É–∂–µ —à–∫–æ–¥–∞, —â–æ –≤–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è –∑ —Ç–∞–∫–æ—é —Å–∏—Ç—É–∞—Ü—ñ—î—é. –î–∞–≤–∞–π—Ç–µ —è –Ω–µ–≥–∞–π–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—é —Å—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è. –ù–∞–∑–≤—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó. –Ø –∑—Ä–æ–±–ª—é –≤—Å–µ –º–æ–∂–ª–∏–≤–µ, —â–æ–± –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å —ñ –Ω–∞–¥–∞—Ç–∏ –≤–∞–º —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."
    },
    {
      id: 2,
      title: "–û–ø–ª–∞—Ç–∞ –∑–∞ –ª—ñ–∫–∏",
      objection: "–ß–æ–º—É —è –º–∞—é –æ–∫—Ä–µ–º–æ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ª—ñ–∫—ñ–≤? –Ø –¥—É–º–∞–≤, —Ü–µ –≤—Ö–æ–¥–∏—Ç—å —É –≤–∞—Ä—Ç—ñ—Å—Ç—å!",
      idealAnswer: "–Ø —Ä–æ–∑—É–º—ñ—é –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –î–æ—Å—Ç–∞–≤–∫–∞ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤ –≤–∏–º–∞–≥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —É–º–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É, —Ç–æ–º—É —Ü—è –ø–æ—Å–ª—É–≥–∞ —Ç–∞—Ä–∏—Ñ—ñ–∫—É—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó —ó—Ö–Ω—å–æ—ó –±–µ–∑–ø–µ–∫–∏. –î–∞–≤–∞–π—Ç–µ —è –ø–µ—Ä–µ–≤—ñ—Ä—é, —á–∏ –º–æ–∂–µ–º–æ –º–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∞–±–æ –ø–∞–∫–µ—Ç–Ω—É –ø–æ—Å–ª—É–≥—É."
    },
    // ... —ñ–Ω—à—ñ –≤–∞—à—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
];

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –í–Ü–î–ü–†–ê–í–ö–ò –î–ê–ù–ò–• –í –¢–ê–ë–õ–ò–¶–Æ
const sendDataToGoogleSheet = async (data) => {
  const scriptUrl = process.env.REACT_APP_GOOGLE_SCRIPT_URL;
  if (!scriptUrl) {
    console.error("Google Script URL is not defined!");
    return;
  }

  try {
    await fetch(scriptUrl, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    });
    console.log("Data successfully sent to Google Sheet.");
  } catch (error) {
    console.error("Error sending data to Google Sheet:", error);
  }
};


const App = () => {
  const [currentScenarioIndex, setCurrentScenarioIndex] = useState(0);
  const [userAnswer, setUserAnswer] = useState('');
  const [userName, setUserName] = useState('');
  const [isNameSet, setIsNameSet] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null);

  const handleAnalyze = async () => {
    setIsLoading(true);
    setAnalysisResult(null);
    const currentScenario = scenarios[currentScenarioIndex];

    try {
      const response = await fetch('/.netlify/functions/analyze', {
        method: 'POST',
        body: JSON.stringify({
          name: userName,
          answer: userAnswer,
          scenario: currentScenario,
        }),
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.statusText}`);
      }

      const result = await response.json();

      if (result.status === 'success') {
        setAnalysisResult(result.analysis);
        // –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£
        await sendDataToGoogleSheet({
          name: userName,
          answer: userAnswer,
          scenario: currentScenario,
          analysis: result.analysis // –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
        });
      } else {
        throw new Error(result.message || 'Unknown error from analysis function');
      }
    } catch (error) {
      setAnalysisResult({ error: error.toString() });
    } finally {
      setIsLoading(false);
    }
  };

  const handleNextScenario = () => {
    setAnalysisResult(null);
    setUserAnswer('');
    setCurrentScenarioIndex((prevIndex) => (prevIndex + 1) % scenarios.length);
  };

  if (!isNameSet) {
    return <NameInputScreen onNameSubmit={(name) => { setUserName(name); setIsNameSet(true); }} />;
  }

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
      {isLoading ? <LoadingScreen /> :
       analysisResult ? <AnalysisResult result={analysisResult} onNext={handleNextScenario} /> :
       <ScenarioScreen
         scenario={scenarios[currentScenarioIndex]}
         userAnswer={userAnswer}
         setUserAnswer={setUserAnswer}
         onAnalyze={handleAnalyze}
       />}
    </div>
  );
};

// ... (–≤—Å—ñ —ñ–Ω—à—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: NameInputScreen, ScenarioScreen, LoadingScreen, AnalysisResult –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

const NameInputScreen = ({ onNameSubmit }) => {
    const [name, setName] = useState('');
    const handleSubmit = (e) => {
        e.preventDefault();
        if (name.trim()) {
            onNameSubmit(name.trim());
        }
    };
    return (
        <div className="bg-white p-8 rounded-lg shadow-lg animate-fade-in w-full max-w-md mx-auto">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è</h2>
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–í–∞—à–µ —ñ–º'—è"
                />
                <button type="submit" className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg mt-4 hover:bg-blue-700 transition-colors">
                    –ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
                </button>
            </form>
        </div>
    );
};

const ScenarioScreen = ({ scenario, userAnswer, setUserAnswer, onAnalyze }) => (
    <div className="bg-white p-8 rounded-lg shadow-lg animate-fade-in w-full max-w-3xl mx-auto">
        <h2 className="text-2xl font-bold text-gray-800 mb-2">{scenario.title}</h2>
        <p className="text-gray-600 mb-6 bg-yellow-50 border border-yellow-200 p-4 rounded-md">{scenario.objection}</p>
        <textarea
            value={userAnswer}
            onChange={(e) => setUserAnswer(e.target.value)}
            className="w-full h-48 p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—É—Ç..."
        />
        <button
            onClick={onAnalyze}
            className="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg mt-4 hover:bg-green-700 transition-colors"
        >
            –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        </button>
    </div>
);

const LoadingScreen = () => (
    <div className="text-center">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500 mx-auto"></div>
        <p className="mt-4 text-lg font-semibold text-gray-700">–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...</p>
    </div>
);

const AnalysisResult = ({ result, onNext }) => {
    if (result.error) {
        return (
            <div className="bg-white p-8 rounded-lg shadow-lg animate-fade-in w-full max-w-3xl mx-auto">
                <h2 className="text-2xl font-bold text-red-600 mb-4 text-center">–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É</h2>
                <div className="bg-red-50 p-4 rounded-md border border-red-200 text-red-800">
                    <p><strong>–î–µ—Ç–∞–ª—ñ:</strong> {result.error}</p>
                </div>
                <button onClick={onNext} className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg mt-6 hover:bg-blue-700 transition-colors">
                    –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
                </button>
            </div>
        );
    }

    return (
        <div className="bg-white p-8 rounded-lg shadow-lg animate-fade-in w-full max-w-3xl mx-auto">
            <h2 className="text-3xl font-bold text-gray-800 mb-6 text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É</h2>
            <div className="flex flex-col md:flex-row items-center justify-center gap-8 mb-8">
                <div className={`w-32 h-32 rounded-full flex items-center justify-center text-white text-5xl font-bold ${result.score >= 8 ? 'bg-green-500' : result.score >= 5 ? 'bg-yellow-500' : 'bg-red-500'}`}>
                    {result.score}
                </div>
                <div className="flex-1">
                    <div>
                        <h3 className="text-xl font-semibold text-green-600 mb-2">‚úÖ –°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏</h3>
                        <p className="text-gray-700 bg-green-50 p-4 rounded-md border border-green-200">{result.strengths}</p>
                    </div>
                    <div className="mt-4">
                        <h3 className="text-xl font-semibold text-yellow-600 mb-2">üí° –ó–æ–Ω–∏ –¥–ª—è —Ä–æ—Å—Ç—É</h3>
                        <p className="text-gray-700 bg-yellow-50 p-4 rounded-md border border-yellow-200">{result.areasForImprovement}</p>
                    </div>
                </div>
            </div>
            <button onClick={onNext} className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg mt-4 hover:bg-blue-700 transition-colors">
                –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
            </button>
        </div>
    );
};

export default App;